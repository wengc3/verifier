import os, sys
from gmpy2 import mpz
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

from chvote.verifier.SingleTest import SingleTest
from chvote.Utils.VerifierHelper import completness_decorate
from chvote.verifier.IntegrityTests.multiMathGroupeHelper import multiMathGroupeHelper
from chvote.Common.IsMemberOfGroupe import IsMemberOfGroupe

class DecryptionIntegrityTest(SingleTest):
    """docstring for DecryptionIntegrityTest."""
    @completness_decorate()
    def runTest(self,election_data):
        """
        Test if b_bold_prime_j in G_q^N
        >>> res = decit.runTest({'b_bold_prime_j': ['1022515636834304568338530955408098580734488050967574796458735411874389526687922802845835328335744075190543736928456638151799727007605864703418872547556279136429918240013201576865596762389022684447675276563670519407067681460071594430857713668010122907255563669770462942783977365457366880825854350134317208235172253105785525533451441357412731801298449004554102585606812139732422650435098410474299459480278425710323037624798833274788102721595314645253631942813798874401143227974948435024714642029884243487714062333046123045440227738578178322246371873231539411881108851368815395989435100170163482077220265577796786045031132586872229204580972645268731026665101389862846286073710738896451423499463298529305554070480685654230198201259323220722602658593061746505861552497870606906176818584337906764485049874345074678938451206423816508415511637621571415790846730362515472362191367412627158375163479190573884313994751891217296583227981', '3637886505155529718585013062351648361340432005291634055951393670262836363520763636484078311534826865180501570408637223008333176267149150277871072677368924786832870446375979129992100097344971961577615211874891998757069758157674973315673411388530985602853116234830554146114003327544488062967801470881304418472164261075184409190263082473822446323835058095236422008894410233370096366498783966229134309367848463893335128868662101910146039281803481965132203313227659815267712101049180439945192482347495400797151429281854335451141724468921276061141359816542693092917328947127531035318998645817193076649379428799870515508752001296462899556262653327062518669668703496577377650553048162598165621693541532263187370915338454789030132587445442501711190838981868818787601455106389371657929407463780882450951347283242233282121778237451404315525054195800858114364718301317237219837653164678135964738862414911865199698197611884154402697426317', '3432609334079079612286504642415731295126107993236664400484554993439499831802379907251328211977361967446007683492475817363608114470546633530116324108709629128927323874534875257518007044997737904361749539866199074415790974443738981082845380093313796098556232187844137089471412288316089499115395285833230913532508304293472369383344107590069753333858747887809685296727831812381312318857458654855206820041047259125143598122654002789306806097969514152345058183470269458798001612254020219244797338115146597257737854850160792130183433212390979993045805425486534072787269377517978675002595875923290884150551793297690439541133357978404633635824815484398584986281321734172838518869079444464261412471276176558615065634835975087573021995641954618033771910699669521242692681866127570540765384920921303551240831143145387418323844488174604669867500855805454208610099288663318825469549064168001599922591562136784231802773314153159133170573089']})
        >>> res.test_result
        'successful'
        """
        b_bold_prime_j = self.test_data
        N = self.election_data['N']
        param = self.election_data['secparams']
        self.test_result.addTestData('p',param.p)
        self.test_result.addTestData('N',N)
        return 'successful' if multiMathGroupeHelper(b_bold_prime_j,N,param.p) else 'failed'

if __name__ == '__main__':
    import doctest
    from chvote.Common.SecurityParams import secparams_l1,secparams_l2,secparams_l3
    from chvote.verifier.TestResult import TestResult
    from app.verifier.Report import Report
    TestResult.setReport(Report("1"))
    deci_test = DecryptionIntegrityTest("1.1","TEST","TEST",["b_bold_prime_j"])
    deci_test.election_data = {'secparams': secparams_l3,'N': 3}
    doctest.testmod(extraglobs={'decit': deci_test})
