import os, sys
from gmpy2 import mpz
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

from chvote.verifier.SingleTest import SingleTest
from chvote.Utils.VerifierHelper import completness_decorate

from chvote.verifier.IntegrityTests.multiMathGroupeHelper import multiMathGroupeHelper

class EncrypdetSelectionIntegrityTest(SingleTest):
    """docstring for EncrypdetSelectionIntegrityTest."""

    @completness_decorate
    def runTest(self,election_data):
        """
        Test if each element is in (G_q^2)
        >>> res = esit.runTest({'a_bold': [['1921458892249490206594745283326191260301505990342195446041626806247980482870389432992718511025356985845915787488224408207061395168577396430477475047838178513410129584754895004247150749811368258345493019430442062996448760324560566621530854849432263879215250102182728896508198612766800177267102874236241521399519031408103624309620238901319689859179642109665697967507839364957210016560012917568087076974129167392939376643359848220371360638293024995065687893659545453552103136205233679119450050036729305425502698899133996744873992348383990370495179098272127419024963261951108772265503475645588879424020141262541459325456333565324635024095629459976182711584348989148923691659390484786702344732733795075642540417213696944856794424449339281367813918523480223450976921087084107910720174347431376388407571723525537383167836421864924400451775236979918881270737381677414643490822150072954889166435266116110286862619841969204883635329646', '3875820727394460400419869633973148548608647951123787913829403322770497699306254966790073146373971506193900033969022887887003734569427486637123284046102887179802388315419427717495379362368341055079431936477343075473472358941852710718599505494414973931671999072734269158726654561854188620576208033367719350259470145292674797566989931781526005773320611839886542848262863104971305053319696466487393523232691198326769552660353309970295226402740267556667045860202051844665535162545367651130317471703289541369040261833950273354054307398742206150252885069046183935033218471895416127653733810107727003948833588143322553610148980438275317181462740829962271849232259610825122285270312448257119767176588121463594053524643885764100246592945256260269102735872280081623075830611187485783630238339727767317430223705270450510462206216020146548278302584075981454435692052714641907242336879988468649998238573661018967442181981683353350886152552']]})
        >>> res.test_result
        'successful'
        """
        a_bold = self.test_data
        param = self.election_data['secparams']
        for item in a_bold:
            if not multiMathGroupeHelper(item,2,param.p):
                return 'failed'
        return 'successful'

if __name__ == '__main__':
    import doctest
    from chvote.Common.SecurityParams import secparams_l1,secparams_l2,secparams_l3
    from chvote.verifier.TestResult import TestResult
    from app.verifier.Report import Report
    TestResult.setReport(Report("1"))
    esi_test = EncrypdetSelectionIntegrityTest("1.1","TEST","TEST",["a_bold"])
    esi_test.election_data = {'secparams': secparams_l3}
    doctest.testmod(extraglobs={'esit': esi_test})
