import os, sys
from gmpy2 import mpz
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

from chvote.verifier.SingleTest import SingleTest
from chvote.Utils.VerifierHelper import completness_decorate

from chvote.Common.IsMemberOfGroupe import IsMemberOfGroupe
from chvote.verifier.IntegrityTests.multiMathGroupeHelper import multiMathGroupeHelper

class BallotProofIntegrityTest(SingleTest):
    """docstring for ."""
    @completness_decorate()
    def runTest(self,election_data):
        """
        Test if pi is in (G_q_hat x G_q^2) x (Z_q_hat x G_q x Z_q)
        >>> res = bpit.runTest({'pi': [['1551518715298281810725008152186431952652911977400051971351117985322150273601237417251121755582093784435557528621373245540164963608421169237494609580055713561634568745342611843157757228409748428433968200164659328446836433417525940363339381848600720350614584637963125574619783351716667736845024454743102051074468035995135621072550122998043690239782477227863780869272025975450448776339280162207860639679369233280771742688677626249166319435630952526186668530247253151967049361579695736970861406401402489208064795535054270552842549740776895222869046132946504718334099843270330643375941420134676400063917510131423366419846167241144193576054664006996502350277175699477932184812676309960801521099489851321299848578844879878373930454649630301898298113830265184529969741036615757032385330649211476090110214812904039297983259851967722001727032097917658713204071510660714049404710709641885292611226656269018406156458326947223382538133171', '2681055189051785139496617906652251559826827232197503063672079918961707173757473380225204494481201573995033820913272938334438823578325741371489384421686468011065021310475577984113278941291618564431193845281488097409878030614267737086582286368780576436680785067601431508955843879154757246222496582926421463309140026200071546791922316406853860294910739784794178224435545352838094181309961318739385206171631432794570640347107100534527068345625823381640214129453694843694538926229779225586438298118934212975683967224301543019473446891974244199613698688817248631099058320252996568125732789846481261221158650640749512330113146889792160105953267326796129032700951017014524924813564528345426844536710165405799876483996623475334864715546712100754757931570163233455731808319709631712413856341921161696809910688089335194763177082542628847901357966953309469739903262836672867120174832028990429817597381687639370923303104561181728810362924', '2640556379654863782362294528545018790097676249690136807507681120887138581766021016569657102471671567818054202428457175640708697650588267878114314123859335239552235006323413701765203455739838297198670663100869071298619679178665430145264008823534934080882187424780009314634183513218886670879585137925694049261370094591479331780209858888470345742481696256092896369787349982890757512170441914302244839221013210573771165144570427422366088390837624657419569091520288535575226950572586961670763915766957529942903270811462970038272460857442887353419533131558514939321043831201053754375023833069831468929483938191601800387952686385562042185617131362267108312125604817626263415216582145491741210701715127111058522270020784336508553507907021826087567258674113391707532173664928542414775819325799491651618503403939936202920365414592713670357845538698809675308021708463237308931527135757823877072161423799500310691059447029301124560800271'], ['37256286110537000729878712350644938482682327329537694128360422334810436681162', '3280459856210399154422418987994983778888363609721644771110896175138332244862068207475709799065670839877390858783238895022252886975715142751989107511994280797035992212556808079537214849625178433970938228115924229719653618381320392970066730758784506647422986404275247586730402647991531840219030225038466604051554078270831008868799635459094421875734831584539186541102598064957246714193118785250276717295564945531246490028627674735947959237352774965036132798330827118258600884929751328303409515010514375939938894604032411523181161626924302397208587456091449814718107647331545597442128969521018132653001098107104033360398721782848065305453415929936939152366403498796395574664289752894663153234759484826382013371634882759095315838690005921170569376514337099722381986238306781442356500029974327038796749687747596966104538505104491870059607758197253736593800915012136681052033100768349594020334559837974454195666251721079320622546131', '1912660094654917298006472216039842576073940735380313740703266529883002432909719434721847960785725056388348307271292687683055945067419849136039117559787102358524805271284107486338284366039567657677958563207453323661071671237372357669180609277060898649966353197241991336956595932242242520379961909266546950110398556477327456250609910866495416412635915151446029781423915193791858089953883501618490233515212873767767774879012830291915576042671592359581931735557004561486530096365852622074633283705896354365211155467867325011188785365277191493849113239777870659758646015329816102642133605633582466514772914275862015749731689528363601431191322863464089664765311083092840973364477696185600322514061531076758305207251243304980672763979972286169256197787189505239085049773612252485125999911152993299770938281072383206815946783316772763620864702105632905927175704393169044232359647071658340609586160000911503283109961506325385551015058']]})
        >>> res.test_result
        'successful'
        """
        param = self.election_data['secparams']
        pi = self.test_data
        pi_s = pi[0] #pi s as string array
        pi_t = pi[1] #pi t as string array
        pi_s_res = IsMemberOfGroupe(mpz(pi_s[0]),param.p_hat) and multiMathGroupeHelper([mpz(pi_s[1]),mpz(pi_s[2])],2,param.p)
        pi_t_res = int(pi_t[0]) in range(param.q_hat) and IsMemberOfGroupe(mpz(pi_t[1]),param.p) and int(pi_t[0]) in range(param.q)
        self.test_result.addTestData('p_hat',param.p_hat)
        self.test_result.addTestData('p',param.p)
        self.test_result.addTestData('q_hat',param.q_hat)
        return 'successful' if pi_s_res and pi_t_res else 'failed'


if __name__ == '__main__':
    import doctest
    from chvote.Common.SecurityParams import secparams_l1,secparams_l2,secparams_l3
    from chvote.verifier.TestResult import TestResult
    from app.verifier.Report import Report
    TestResult.setReport(Report("1"))
    bpi_test = BallotProofIntegrityTest("1.1","TEST","TEST",["pi"])
    bpi_test.election_data = {'secparams': secparams_l3}
    doctest.testmod(extraglobs={'bpit': bpi_test})
