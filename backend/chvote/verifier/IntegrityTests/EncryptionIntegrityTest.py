import os, sys
from gmpy2 import mpz
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

from chvote.verifier.SingleTest import SingleTest
from chvote.Utils.VerifierHelper import completness_decorate
from chvote.verifier.IntegrityTests.multiMathGroupeHelper import multiMathGroupeHelper

class EncryptionIntegrityTest(SingleTest):
    """docstring for EncryptionIntegrityTest."""

    @completness_decorate()
    def runTest(self,election_data):
        """
        For i in {1,..,N} Test if e_bold_j[i] is in G_q^2
        >>> res = encit.runTest({'e_bold_j': [['1262457596262699919537946365285189969643447543946360410911590357914360831607184832253777666034638102071770458933583045340412304580373719792175786029197995879675341251832832057414117105494275286367403922425448918773733206012547336928251209044541511681065896215664336890542207972726005031418276792497760710199332307329937984409824699402948803665159098186300992924082688640507132941246693335416143340403788427263378472372658346825659165175867059814589863547033558557523787567682243508219041687440797526230396090150132779805691143441934632688097280001275800533114233536980488443936421680544045545510783640302934428168185997501646997475108718855206155301530148726606829676660085118490190303928683493239462305622611287777506639511198159290198293494978954685580057521464772437333623998185139323446461023987756231339913758808441483153188175940966881782088941591488282213701674609456126958873802396015835930515934026744431289101165447', '821349521027863936037493357637742180026655649725559419864390111507994125878697431407240743787749205292501752883404391062865016094235572440754489958109378499720697734749415615310979028321665447602193608282281782430219948042681865899795809626345938309628723810934996043691561820802199918981026676134138517070398888113941916597826615311699126482812423581136088865513289837545959298494551835209656922903893703011087581197208977714916383249070484690075253986486048811881845224238923375467983457672740255031782298066662830765104708594730826249975314123441071740869822705053034446357810880382700072382769316376754747339122688816166688767371918411657331683743190747139684006803596321498508941469528605195387913569201769848833246538740935074239990320301297718984337472772523891399038378485063917286371733484122677406653818033091805281742371990065133801898033186467201541243969326530791832091926774559701289218060232301785647076708365'], ['3295408204744488483926444848695225806685003190828107030708424060274701540682697787629957503201449536511720903167200225500441445599125790818182233097328049457802762099442432493520080514658974203803417525224734069304436797121955060935625789992409164993589428631825162178145501371231321059371942385727309184179972016314609013827311801504348878997018465364954468186517910306498039962099624190899849219212857216275259484059824071432320391662736909971239668543920222369203565209924187220961416382078059853845136919368018724397935188122960740987550411892056789987778176362556061179811463738249885283363695790273921658882678386319749876787860042858172716776577222086822673015488636798602352835101063493059629861325505548753160130464348391053855915835337480976258270934481897983145915085979197518522917392893718982476683977055413546416029105784286025779880061328810455769367226977344132325964575359591281260951035926085197778855375979', '1176307860290405617785203877747446171689856798406121087471458924762970116589387488108997526149852509842205727571350042768484003747967330408494976842442572971634894934323757633851289273830235824855913441375298467349763518753488159842907243042468688209823458773144805600552753238853440322334724040235019609598414230838106018406122617693394320109063856672955994378614600087452020750520989074653162213138035234607877976608684145662133696940856173867938891810197518821597417748667851331152030786003975483355294008061232980645022778099260131022344123281320685813884660692465754839368611645447349156663819338580655908921878752733035978882628404401605624358503091194270868790167256038029903801656823972698627347270498396006198680885807235644127930718744741305569996194803871082767815408183820976861366381072107462683495010473709528142026045770977764328163198985576851168758297972089569806581923851611534137634529473342774798804916875'], ['3914491199883871770019226477479469536574237450794746377094632383649932998081017973038540080883622961126408873102382905412928082662824259559993473029237760728673557361203336410708738885733073787496899315684815046393250848995353560851426219831089129777436084022753491930546746144759965563965999778691450084868324418889859986260538193149316764709254664704446056000438413607581596124400795356523059229999864889499724475359302261627277606829418372284018682684419617190668325106039745865186596088151110763157812397173711771754881465360261644641308841606233539402850578995091454749783937467691320958999984042577398437265833487016300011274684690842658160738080148965763680562803398953673403760285464714840111932360956133656139975586983518095963460563462178855880406714326193799479958711101183969233003963757493584231780504766128849194817966758523675330146937296937821286527144249841785943569669626609797888076376264248430360581544021', '1976942970273939295741883516616639467994509343266193609625792971358259472825097066839686094756123192841385174012013180076672412584174845067039152109825587200239296789758242614144878706947206419738086312582164733614922669917159275776427545544594299714027377852180501547387370974689145690506610523099213745842049480763498475763911089924313190402688495747173792174886111918269690395626825780772532787027479378318255204642125128829776844914852953470068156503187036831805607094192593208647653324634086030084454152813405305068055414633682330764840452711848523292014051774354277989734447323271655493705163043210817690462957957486533341528937842187348165518597510015053769193529254809531451124400080757191631005334429668710494656511086816387184420880111660208756962785050386356684119664586003774091463519144259991034570714706953360230043761110736754672292420514990598527198511881009399431127878836462686014867374693298190097795168838']]})
        >>> res.test_result
        'successful'
        """
        try:
            e_bold_j = self.test_data
            N = self.election_data['N']
            param = self.election_data['secparams']
            self.test_result.addTestData('p',param.p)
            for i in range(N):
                if not multiMathGroupeHelper(e_bold_j[i],2,param.p):
                    return 'failed'
            return 'successful'
        except IndexError:
            return 'failed'


if __name__ == '__main__':
    import doctest
    from chvote.Common.SecurityParams import secparams_l1,secparams_l2,secparams_l3
    from chvote.verifier.TestResult import TestResult
    from app.verifier.Report import Report
    TestResult.setReport(Report("1"))
    enci_test = EncryptionIntegrityTest("1.1","TEST","TEST",["e_bold_j"])
    enci_test.election_data = {'secparams': secparams_l3,'N': 1}
    doctest.testmod(extraglobs={'encit': enci_test})
